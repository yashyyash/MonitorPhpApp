name: PHP Application Monitoring

# Disabling schedule and workflow_dispatch by commenting them out
# Uncomment to re-enable the triggers

# on:
#   schedule:
#     - cron: '*/5 * * * *'  # Run every 5 minutes
#   workflow_dispatch:

permissions:
  contents: read
  issues: write

env:
  AWS_REGION: us-east-1
  APP_URL: http://3.81.166.101/app.php
  INSTANCE_ID: i-009abcc462d996efd

jobs:
  monitor:
    runs-on: ubuntu-latest
    
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Check application and send metrics
      id: health_check
      run: |
        # Check application health
        start_time=$(date +%s%N)
        http_code=$(curl -o /dev/null -s -w "%{http_code}" ${{ env.APP_URL }})
        end_time=$(date +%s%N)
        response_time=$(( ($end_time - $start_time) / 1000000 ))
        
        echo "HTTP Status Code: $http_code"
        echo "Response Time: $response_time ms"
        
        # Send metrics to CloudWatch
        aws cloudwatch put-metric-data \
          --namespace "PHP_Application" \
          --metric-name "ResponseTime" \
          --value $response_time \
          --unit Milliseconds \
          --dimensions Instance=${{ env.INSTANCE_ID }}
        
        # Record availability (1 for up, 0 for down)
        aws cloudwatch put-metric-data \
          --namespace "PHP_Application" \
          --metric-name "Availability" \
          --value $([ "$http_code" -eq 200 ] && echo 1 || echo 0) \
          --unit Count \
          --dimensions Instance=${{ env.INSTANCE_ID }}

    - name: Get CPU metrics
      run: |
        # Calculate timestamps
        end_time=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
        start_time=$(date -u -d "5 minutes ago" +"%Y-%m-%dT%H:%M:%SZ")
        
        # Get CPU metrics
        aws cloudwatch get-metric-statistics \
          --namespace AWS/EC2 \
          --metric-name CPUUtilization \
          --dimensions Name=InstanceId,Value=${{ env.INSTANCE_ID }} \
          --start-time "$start_time" \
          --end-time "$end_time" \
          --period 300 \
          --statistics Average

    - name: Create issue on failure
      if: failure()
      run: |
        gh auth login --with-token <<< "${{ secrets.GITHUB_TOKEN }}"
        gh issue create \
          --title "Application Monitoring Alert" \
          --body "The application monitoring check has failed. Please investigate." \
          --repo "${{ github.repository }}"
